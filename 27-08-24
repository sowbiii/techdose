11. CODE IMPLEMENTATION :
a. Count Set Bits:
   int countSetBits(int n) {
    int count = 0;
    while (n > 0) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}
b. Check if ith Bit is Set:
    boolean isIthBitSet(int n, int i) {
    return (n & (1 << i)) != 0;
}
c. Set the ith Bit:
int setIthBit(int n, int i) {
    return n | (1 << i);
}
d. Unset the ith Bit:
    int unsetIthBit(int n, int i) {
    return n & ~(1 << i);
}
e. Generate All Subsets of an Array:
void generateSubsets(int[] arr) {
    int n = arr.length;
    for (int i = 0; i < (1 << n); i++) {
        for (int j = 0; j < n; j++) {
            if ((i & (1 << j)) != 0) {
                System.out.print(arr[j] + " ");
            }
        }
        System.out.println();
    }
}
f. Swap Two Numbers:
void swap(int a, int b) {
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;
}
g. Check Odd or Even:
boolean isEven(int n) {
    return (n & 1) == 0;
}
h. Convert Uppercase to Lowercase:
char toLowerCase(char c) {
    return (char) (c | ' ');
}
i. Toggle the ith Bit:
int toggleIthBit(int n, int i) {
    return n ^ (1 << i);
}

11.FULL CODE IMPLEMENTATION:
public class BitManipulation {

    public static int countSetBits(int n) {
        int count = 0;
        while (n > 0) {
            count += n & 1; 
            n >>= 1;        
        }
        return count;
    }

    public static boolean isIthBitSet(int n, int i) {
        return (n & (1 << i)) != 0;
    }

    public static int setIthBit(int n, int i) {
        return n | (1 << i);
    }

    public static int unsetIthBit(int n, int i) {
        return n & ~(1 << i);
    }

    public static void generateSubsets(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < (1 << n); i++) { 
            System.out.print("{ ");
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) != 0) {  
                    System.out.print(arr[j] + " ");
                }
            }
            System.out.println("}");
        }
    }

    public static void swap(int a, int b) {
        System.out.println("Before swapping: a = " + a + ", b = " + b);
        a = a ^ b;
        b = a ^ b;
        a = a ^ b;
        System.out.println("After swapping: a = " + a + ", b = " + b);
    }

    public static boolean isEven(int n) {
        return (n & 1) == 0;
    }

    public static char toLowerCase(char c) {
        if (c >= 'A' && c <= 'Z') {
            return (char) (c | ' '); // Bitwise OR with space character to convert
        }
        return c;
    }

    public static int toggleIthBit(int n, int i) {
        return n ^ (1 << i); // XOR with 1 at the ith position to toggle
    }

    public static void main(String[] args) {
        int num = 29; 
        System.out.println("Number of set bits in " + num + ": " + countSetBits(num));

        int i = 3;
        System.out.println("Is bit " + i + " set in " + num + ": " + isIthBitSet(num, i));

        System.out.println("Set bit " + i + " in " + num + ": " + setIthBit(num, i));

        System.out.println("Unset bit " + i + " in " + num + ": " + unsetIthBit(num, i));

        int[] arr = {1, 2, 3};
        System.out.println("Subsets of array {1, 2, 3}:");
        generateSubsets(arr);

        int a = 5, b = 10;
        swap(a, b);

        num = 7;
        System.out.println(num + " is even: " + isEven(num));

        char uppercaseChar = 'A';
        System.out.println("Lowercase of " + uppercaseChar + ": " + toLowerCase(uppercaseChar));

        num = 29;
        System.out.println("Toggle bit " + i + " in " + num + ": " + toggleIthBit(num, i));
    }
}
OUTPUT:
Number of set bits in 29: 4
Is bit 3 set in 29: true
Set bit 3 in 29: 29
Unset bit 3 in 29: 21
Subsets of array {1, 2, 3}:
{ }
{ 1 }
{ 2 }
{ 1 2 }
{ 3 }
{ 1 3 }
{ 2 3 }
{ 1 2 3 }
Before swapping: a = 5, b = 10
After swapping: a = 10, b = 5
7 is even: false
Lowercase of A: a
Toggle bit 3 in 29: 21

